apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'org.asciidoctor.jvm.convert'
apply plugin: 'org.asciidoctor.jvm.pdf'

buildscript {
  apply from: "${rootDir}/gradle/dependencies.gradle"

  repositories {
    maven { url "https://repo.spring.io/plugins-release" }
    maven { url "http://repo.spring.io/libs-release" }
    maven { url "http://repo.spring.io/libs-milestone" }
    maven { url "https://plugins.gradle.org/m2/" }
	gradlePluginPortal()
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath gradlePlugins.values()
  }
}

allprojects {
	repositories {
		mavenCentral()
		maven { url("https://plugins.gradle.org/m2/") }
		maven { url 'https://repo.spring.io/snapshot' }
		maven { url 'https://repo.spring.io/milestone' }
	}
}

subprojects {
	group = 'com.github.tscz.spring.platform'
	version = '0.0.1-SNAPSHOT'
	
	apply plugin: "java"
	apply plugin: "jacoco"
	
	jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }
    
    test {
		useJUnitPlatform()
	}
	
	apply from: file("$rootProject.projectDir/gradle/heroku/stage.gradle")
}

jacocoTestReport {
	reports {
		xml.enabled = true // coveralls plugin depends on xml format report
		html.enabled = true
	}
}

test {
	useJUnitPlatform()
}

// coveralls setup
task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = subprojects.test
    sourceDirectories.from files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from  files(subprojects.sourceSets.main.output)
    executionData.from files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
	jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
  	saveAsFile = true
	sendToCoveralls = false
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
}


asciidoctor {
	outputOptions {
	        backends = ['html5', 'pdf']
	    }

	options doctype: 'book'
	attributes \
		'toc' : 'left' 
}