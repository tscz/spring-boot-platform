// Define Java conventions for this organization.
// Projects need to use the Java, Checkstyle and Spotbugs plugins.

plugins {
    id 'java'
    id 'jacoco'
    //id 'checkstyle'

    // NOTE: external plugin version is specified in implementation dependency artifact of the project's build file
    id 'com.github.spotbugs'
}

		configurations {
			internal {
				visible = false
				canBeConsumed = false
				canBeResolved = false
			}
		}

		def internal = configurations["internal"]

		configurations["compileClasspath"].extendsFrom(internal)
		configurations["runtimeClasspath"].extendsFrom(internal)
		configurations["testCompileClasspath"].extendsFrom(internal)
		configurations["testRuntimeClasspath"].extendsFrom(internal)

	javadoc.options {
	     addBooleanOption('-enable-preview', true)
	     addStringOption('-release', '15')
	 }

	tasks.withType(JavaCompile) {
    	options.compilerArgs += "--enable-preview"

	}
	tasks.withType(Test) {
	    jvmArgs += "--enable-preview"
	}
	tasks.withType(JavaExec) {
	    jvmArgs += "--enable-preview"
	}
// Projects should use JCenter for external dependencies
// This could be the organization's private repository
repositories {
    jcenter() 
}

jacoco {
    toolVersion = project.ext['jacoco.version']
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

test {
	useJUnitPlatform()
}

// Use the Checkstyle rules provided by the convention plugin
// Do not allow any warnings
//checkstyle {
//    config = resources.text.fromString(com.github.tscz.spring.platform.gradle.CheckstyleUtil.getCheckstyleConfig("/checkstyle.xml"))
//    maxWarnings = 0
//}

// Enable deprecation messages when compiling Java code
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:deprecation"
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}
